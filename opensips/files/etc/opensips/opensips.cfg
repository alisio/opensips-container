#
# $Id$
#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

log_level=3
log_stderror=yes
log_facility=LOG_LOCAL0

children=4

/* uncomment the following line to enable debugging */
#debug_mode=yes

/* uncomment the next line to enable the auto temporary blacklisting of
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no


listen=udp:127.0.0.1:5060   # CUSTOMIZE ME
advertised_address=ME_CONFIGURE
alias=ME_CONFIGURE

####### Modules Section ########

#set module path
mpath="/lib64/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

loadmodule "textops.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5) 	# questao 1.1.8: Configure timeouts (5s with no prov. response and 40s unanswered INVITEs
modparam("tm", "fr_inv_timeout", 40)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### AVPOPs
loadmodule "avpops.so"
modparam("avpops", "db_url", "mysql://opensips:opensipsrw@localhost/opensips")
modparam("avpops", "avp_table", "usr_preferences")

### modulo dialplan
loadmodule "dialplan.so"
modparam("dialplan","db_url","mysql://opensips:opensipsrw@localhost/opensips")


#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

loadmodule "httpd.so"
modparam("httpd", "port", 8080)
loadmodule "mi_json.so"

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### MYSQL module
loadmodule "db_mysql.so"
loadmodule "dialog.so"
modparam("dialog", "profiles_with_value", "caller ; domain")
modparam("dialog", "profiles_no_value", "progress ; active")
modparam("dialog", "db_mode", 2)
modparam("dialog", "default_timeout", 7200) # (60*60*2)
modparam("dialog", "db_url","mysql://opensips:opensipsrw@localhost/opensips")

loadmodule "nathelper.so"
modparam("nathelper","received_avp", "$avp(42)")
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", "SIPPING_FLAG")
modparam("nathelper", "sipping_from", "sip:pinger@206.189.236.109")

loadmodule "rtpproxy.so"
modparam("rtpproxy", "rtpproxy_sock", "udp:127.0.0.1:7890") modparam("nathelper", "natping_interval", 30)

#### USeR LOCation module
loadmodule "usrloc.so"
#modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "nat_bflag", "NAT_BFLAG")
modparam("usrloc", "db_mode",   2)
modparam("usrloc", "db_url","mysql://opensips:opensipsrw@localhost/opensips")


#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
modparam("registrar","max_expires", 120)
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

modparam("registrar","received_avp", "$avp(42)")

#### ACCounting module
loadmodule "acc.so"
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
modparam("acc", "detect_direction", 0)
modparam("acc", "db_url", "mysql://opensips:opensipsrw@localhost/opensips")
#modparam("acc", "db_extra", "caller_id=$fU; callee_id=$rU;leg_type=$avp(legtype)")

#### AUTHentication modules
loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "calculate_ha1", 1)
modparam("auth_db", "password_column", "password")
modparam("auth_db|uri", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME

#modparam("auth_db", "load_credentials", "")
modparam("auth_db", "load_credentials", "$avp(rpid)=rpid;$avp(dpid)= dpid;$avp(privacy)=privacy")

#### Domain Module
loadmodule "domain.so"
modparam("domain", "db_url","mysql://opensips:opensipsrw@localhost/opensips")
modparam("domain", "db_mode", 1)   # Use caching
modparam("uri|auth_db|usrloc", "use_domain", 1)

### S1 ###
loadmodule "alias_db.so"
modparam("alias_db","db_url","mysql://opensips:opensipsrw@localhost/opensips")
### S1 ###

loadmodule "permissions.so"
loadmodule "group.so"
modparam("permissions", "db_url","mysql://opensips:opensipsrw@localhost/opensips")
modparam("group", "db_url","mysql://opensips:opensipsrw@localhost/opensips")

loadmodule "drouting.so"
modparam("drouting", "use_domain", 0)
modparam("drouting","db_url","mysql://opensips:opensipsrw@localhost/opensips")

loadmodule "load_balancer.so"
modparam("load_balancer", "db_url","mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME
modparam("load_balancer", "probing_method", "OPTIONS")
modparam("load_balancer", "probing_interval", 30)

loadmodule "siptrace.so"
modparam("siptrace", "trace_id", "[1]uri=mysql://opensips:opensipsrw@localhost/opensips;table=sip_trace;")
modparam("siptrace", "trace_on", 1)
#modparam("siptrace", "trace_local_ip", "206.189.236.109:5060")
modparam("siptrace", "trace_local_ip", "10.200.177.19:5060")

loadmodule "proto_udp.so"

####### Routing Logic ########

# main request routing logic

route{


	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}
	## Deteccao de NAT
	#
	force_rport();
	if (nat_uac_test("18")) {
		xlog("Cliente $rU esta por tras de NAT\n");
		if (method=="REGISTER") {
			fix_nated_register();
			xlog("Consertando REGISTER Nateado de $rU \n");
		} else {
			fix_nated_contact();
			xlog("Consertando Contato de $rU \n");
		}
		search_append('Contact:.*sip:[^>[:cntrl:]]*', ';nat=yes');
         	setflag(NAT_FLAG);
	}

	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {

			if (is_method("BYE")) {
        # do accunting, even if the transaction fails
        do_accounting("log|db","failed");

			} else if (is_method("INVITE")) {
				# even if in most of the cases is useless, do RR for
				# re-INVITEs alos, as some buggy clients do change route set
				# during the dialog.
				record_route();
				# TODO cuidar do rpid para pstn nos reinvites
        #remove_hf("Remote-Party-ID");
        #append_hf("Remote-Party-ID: '$avp(rpid)' <sip:$avp(rpid)@$fd>;privacy=off;screen=no");
			}
			# route it out to whatever destination was set by loose_route()
			# in $du (destination URI).
			route(relay);
		} else {

			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# non loose-route, but stateful ACK; must be an ACK after
					# a 487 or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ->
					# ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}

  	if(is_method("INVITE")){
       create_dialog();
       # Trace tid=1, dialog, traced_user=$fU
       sip_trace("1", "d", "$fU");
    }

	# CANCEL processing
	if (is_method("CANCEL"))
	{
		if (t_check_trans())
			t_relay();
		exit;
	}

	t_check_trans();

	if ( !(is_method("REGISTER")  ) ) {

		#if (from_uri==myself)
		if(is_from_local())

		{

			# authenticate if from local subscriber
			# authenticate all initial non-REGISTER request that pretend to be
			# generated by local subscriber (domain from FROM URI is local)
			if (!proxy_authorize("", "subscriber")) {
				proxy_challenge("", "0");
				exit;
			}
			if (!db_check_from()) {
				sl_send_reply("403","Forbidden auth ID");
				exit;
			}

			consume_credentials();
			# caller authenticated

		} else {
			# if caller is not local, then called number must be local
			if (!is_uri_host_local()) {
				send_reply("403","Rely forbidden");
				exit;
			}
		}

	}
	# questao 1.1.9.Use the module DIALOG and limit calls to 2 hour
	create_dialog("B");

	### Set profile ###
	if(is_method("INVITE")) {
		if($DLG_status!=NULL) {
			set_dlg_profile("caller","$fU@$fd");
			set_dlg_profile("domain","$fd");
		}

		#contagem de chamadas deste chamador
		$var(ccaller)=0;
		#contagem de chamadas deste dominio
		$var(cdomain)=0;
		#numero maximo de chamadas
		$var(cmax)=5;

		get_profile_size("caller","$fU@$fd","$var(ccaller)");
		get_profile_size("domain","$fd","$var(cdomain)");
		xlog("L_INFO", "Numero de chamadas do usuario $fU@$fd e $var(ccaller) (max: $var(cmax) )\n");
		xlog("L_INFO", "Numero de chamadas do dominio $fd e $var(cdomain)\n");
    xlog("L_INFO", "Duracao das chamadas limitada em $DLG_timeout segundos\n");

    if($var(ccaller)>$var(cmax)){
      xlog("Limite maximo de chamadas ($var(cmax)) atingido para $fU Desligando\n");
      send_reply("403","Limite maximo de chamadas ($var(cmax)) atingido");
      exit;
    }
	}

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR",
		"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			sl_send_reply("403","Preload Route denied");
		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();

	if (!is_uri_host_local()) {
		append_hf("P-hint: outbound\r\n");

		route(relay);
	}

	# requests for my domain

	if (is_method("PUBLISH|SUBSCRIBE"))
	{
		sl_send_reply("503", "Service Unavailable");
		exit;
	}

	if (is_method("REGISTER"))
	{
		# authenticate the REGISTER requests
		if (!www_authorize("", "subscriber"))
		{
			www_challenge("", "0");
			exit;
		}

		if (!db_check_to())
		{
			sl_send_reply("403","Forbidden auth ID");
			exit;
		}

		if (   0 ) setflag(TCP_PERSISTENT);

    		if (isflagset(NAT_FLAG)) {
			xlog("NET_FLAG Setado\n");
			setbflag(NAT_BFLAG);
			setbflag(SIPPING_FLAG);
		};

		if (!save("location"))
			sl_reply_error();

		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}
  alias_db_lookup("dbaliases");
  if( !is_avp_set("$avp(dpid)") ) {
		$avp(dpid)=0;
	}
  xlog("Dialplan: RURI antes da traducao: $ruri");
	if(!dp_translate("$avp(dpid)","$ruri.user/$ruri.user","$avp(dest)")) {
		sl_send_reply("404", "Not Found");
		exit;
	}
  xlog("Dialplan: RURI depois  da traducao: $ruri");
  xlog("Dialplan: rpid: $(avp(rpid))");
	xlog("Dialplan: dpid: $(avp(dpid))");
	xlog("Dialplan: Destination: $avp(dest)");

	if ($avp(dest)=="3") {
		#Route to usrloc
		route(usrloc);
	}

	if ($avp(dest)=="4") {
		#route to drouting
		route(pstn);
	}

	if ($avp(dest)=="5") {
		#route to media server
    xlog("Destino: media server\n");
    if ( !load_balance("1","media")) {
      send_reply("500","No Destination available");
      exit;
    }
    t_on_failure("GW_FAILOVER_LB");
	  route(media);
	}

  if ($avp(dest)=="6") {
    #route to media server
    route(lab);
  }

	sl_send_reply("404", "Not Found");
	exit;

	if(avp_db_load("$ru","$avp(callfwd)")){
	  xlog("Carreguei o atributo callfwd $avp(callfwd) do mysql\n");
	  xlog("ru = $ru \n");
	  xlog("rU = $rU \n");
	  $ru=$avp(callfwd);
	  xlog("Carreguei o novo RURI: $ru\n");
	}

	### S2 ###
	#apply DB based aliases (uncomment to enable)
	# informa a funcao qual tabela armazena os aliases.
  alias_db_lookup("dbaliases");
  ### S2 ###

	# do lookup with method filtering
	if (!lookup("location","m")) {
		if (!db_does_uri_exist()) {
      xlog("420, Bad Extension\n");
			send_reply("420","Bad Extension");
			exit;
		}

		t_newtran();
		t_reply("404", "Not Found");
		exit;
	}



	# when routing via usrloc, log the missed calls also
        do_accounting("log","missed");
	route(relay);
}

route[usrloc]{
	xlog ("Rota usrloc: Chamada de $rU \n");
	if (!lookup("location")) {
		switch ($retcode) {
			case -1:
			case -3:
				t_newtran();
				t_reply("404", "Not Found");
				exit;
			case -2:
				sl_send_reply("405", "Method Not Allowed");
				exit;
		}
	}
	# when routing via usrloc, log the missed calls also
    if (subst_uri('/(sip:.*);nat=yes/\1/')){
		xlog("Rote usrloc: Setando NAT_BFLAG para $rU\n");
   		setbflag(NAT_BFLAG);
    };
  if(is_method("INVITE")) do_accounting("db","cdr|missed");
    if (isflagset(NAT_FLAG)||isbflagset(NAT_BFLAG)) {
	   xlog("Rota usrloc: flag de NAT setado para $rU\n");
           route(mediarelay);
    } else {
	route(relay);
    }
}

route[media] {
  # rewritehostport("10.200.178.70:5060");
  # #rewritehostport("54.91.32.182:5600");
  # #rewritehostport("54.160.131.18:5060");
  # xlog("Enviando chamada para rota 1");
  # route(relay);
  if (!t_relay()) {
    sl_reply_error();
  };
  exit;
}

route[pstn] {
  xlog("rota PSTN usando drouting");
    # routing to the pstn
    if(!do_routing("0")) {
	     sl_send_reply("500", "No routes available");
	     exit;
    }
    ## for INVITEs enable some additional helper routes

    if (is_method("INVITE")) {
  		t_on_branch("per_branch_ops");
  		t_on_reply("handle_nat");
  		t_on_failure("gateway_fail");
    }
    remove_hf("Remote-Party-ID");
    if(is_avp_set("$avp(rpid)")) {
      # se entrou aqui e pq o rpid nao e vazio e a chamada nao e anônima
      if($avp(privacy)=="0"){
     # chamada não é privada
        append_hf("Remote-Party-ID: '$avp(rpid)' <sip:$avp(rpid)@$fd>;privacy=off;screen=no");
      } else {
        # chamada anônima
        append_hf("Remote-Party-ID: 'anonymous' <sip:$avp(rpid)@$fd>;privacy=full;screen=yes");
      }
    }
    do_accounting("db","cdr|failed");

    # for INVITEs enable some additional helper routes
    if (subst_uri('/(sip:.*);nat=yes/\1/')){
		xlog("Setando NAT_BFLAG \n");
   		setbflag(NAT_BFLAG);
    };
    if (isflagset(NAT_FLAG)||isbflagset(NAT_BFLAG)) {
	xlog("Flag de NAT setado\n");
           route(mediarelay);
    };

    if (!t_relay()) {
		    sl_reply_error();
    }
    exit;
}

route[lab] {
  xlog("rota PSTN usando drouting");
    # routing to the pstn
    if(!do_routing("1")) {
	     sl_send_reply("500", "No routes available");
	     exit;
    }
    ## for INVITEs enable some additional helper routes
    if (is_method("INVITE")) {
  		t_on_branch("per_branch_ops");
  		t_on_reply("handle_nat");
  		t_on_failure("gateway_fail");
    }

    if (!t_relay()) {
		    sl_reply_error();
    }
    exit;
}

route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}
	if (!t_relay()) {
		send_reply("500","Internal Error");
	};
	exit;
}





branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");
}

route[mediarelay] {
    xlog("Chamada de $ru esta na rota: mediarelay\n");
    if (is_method("INVITE") && !has_totag()) {
        if (has_body("application/sdp")) {
		xlog("Rota mediarelay: este e um INVITE inicial, com SDP. Ativando rtpproxy\n");
            rtpproxy_engage();
        }
}
}

onreply_route[handle_nat] {
	xlog("Entrando na rota de reply handle_nat \n");
	 if (isbflagset(NAT_BFLAG)) {
		xlog("Rota handle_nat: BFLAG detectado. Adicionando P-hint e tag nat=yes\n");
	    	append_hf("P-hint: Onreply-route - fixcontact \r\n");
		search_append('Contact:.*sip:[^>[:cntrl:]]*', ';nat=yes');
	    	fix_nated_contact();
	  }
	xlog("incoming reply\n");
	if($DLG_status!=NULL && is_method("INVITE")) {
		if($rs=~"18[0-9]") {
			set_dlg_profile("progress");
		} else {
			if(is_in_profile("progress")) unset_dlg_profile("progress");
		}
		if($rs=~"2[0-9][0-9]") {
			set_dlg_profile("active");
		} else {
			if(is_in_profile("active")) unset_dlg_profile("active");
		}
	}

	if(is_method("INVITE")) {
		#Active Call Counter
		$var(cactive)=0;
		#In Progress Call Counter
		$var(cprogress)=0;
		get_profile_size("active","$var(cactive)");
		get_profile_size("progress","$var(cprogress)");
		xlog("L_INFO","Existem $var(cactive) chamadas ativas e $var(cprogress) chamadas em progresso");
	}
}

failure_route[gateway_fail] {
   if (t_was_cancelled()) {
exit; }
       xlog("failure route 2\n");
       if (t_check_status("(408)|(5[0-9][0-9])")){
             if (use_next_gw()) {
                 xlog ("next gateway $ru \n");
                 t_on_failure("gateway_fail");
                 t_relay();
                 exit;
             }
              t_reply("503", "Service not available, no more gateways");
exit; }
}

failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}

  if (isbflagset(NAT_BFLAG) || isflagset(NAT_FLAG)) {
    rtpproxy_unforce();
	}

  if (t_check_status("486")) {
        	revert_uri();
	        xlog("O ramal $rU, no RURI $ru esta ocupado ou recusou a chamada.\n");
	        prefix("b"); #This prefix is included to play the busy message
	        xlog("O prefixo b foi adicionado ao RURI ($ru) para sinalizar ao gateway que toque a msg correspondente\n");
        	xlog("L_ERR","> 486 ruri=<$ru>");
	        route(media);
     		route(relay);
	        exit;
	}
	if (t_check_status("408") || t_check_status("480")) {
		revert_uri();
	  xlog("O ramal $rU, no RURI $ru nao respondeo ao invite (codigo $rs). Adicionar prefixo u ao RURI.\n");
		prefix("u");# prefixo para sinalizar mensagem de ramal indisponivel ao media server
		xlog("L_ERR","> 480 ruri=<$ru>");
		route(media);
		xlog("Estou prestes a enviar para a rota relay o RURI $ru\n");
		route(relay);
		exit;
	}

	# uncomment the following lines if you want to block client
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply("404","Not found");
	##	exit;
	##}


}

failure_route[GW_FAILOVER_LB] {
	if (t_was_cancelled()) {
		exit;
	}

	# failure detection with redirect to next available trunk
	if (t_check_status("[56][0-9][0-9])") || (t_check_status("408") && t_local_replied("ALL"))) {
		xlog("Failed trunk $rd/$du detected \n");
		if (load_balance("1","channel") ) {
      xlog("Tentando proximo mediaserver $rd/$du\n");
			t_on_failure("GW_FAILOVER_LB");
			t_relay();
			exit;
		}
		send_reply("500","All GW are down");
	}
}
